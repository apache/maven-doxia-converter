<?xml version="1.0" encoding="UTF-8"?>

<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<model>
  <id>convertor</id>
  <name>ConvertorModel</name>
  <description>Model for the convertor tool.</description>
  <defaults>
    <default>
      <key>package</key>
      <value>org.apache.maven.doxia.convertor.model</value>
    </default>
  </defaults>
  <classes>
    <class>
      <name>AbstractFile</name>
      <description><![CDATA[
        The <code>&lt;file&gt;</code> to be checked.
      ]]></description>
      <abstract>true</abstract>
      <version>1.0.0</version>
      <fields>
        <field>
          <name>absolutePath</name>
          <version>1.0.0</version>
          <description><![CDATA[
            The absolute Path.
          ]]></description>
          <type>String</type>
          <identifier>true</identifier>
        </field>
        <field>
          <name>format</name>
          <version>1.0.0</version>
          <description><![CDATA[
            The wanted format.
          ]]></description>
          <type>String</type>
          <identifier>true</identifier>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>1.0.0</version>
          <code>
            <![CDATA[
    /**
     * @see File#File(String)
     */
    public java.io.File getFile()
    {
        return new java.io.File( this.absolutePath );
    }

    /**
     * @param in an absolute path
     * @param from a supported format
     * @param supported an array of supported format
     * @return <code>from</code> or the extension of <code>in</code>
     * @throws IllegalArgumentException if any
     * @throws UnsupportedFormatException if any
     */
    protected static String getSupportedFormat( String in, String from, String[] supported )
        throws org.apache.maven.doxia.UnsupportedFormatException
    {
        String fromFormat = null;
        if ( org.codehaus.plexus.util.StringUtils.isEmpty( from ) )
        {
            // try to detect format
            if ( org.codehaus.plexus.util.SelectorUtils.match( "**.*", in ) )
            {
                fromFormat = in.substring( in.lastIndexOf( '.' ) + 1, in.length() );
            }
            else
            {
                throw new IllegalArgumentException( "'" + in + "' is directory: cannot detect the format" );
            }
        }
        else
        {
            fromFormat = from;
        }

        String supportedString = org.codehaus.plexus.util.StringUtils.join( supported, ", " );
        if ( supportedString.indexOf( fromFormat.toLowerCase() ) == -1 )
        {
            throw new org.apache.maven.doxia.UnsupportedFormatException( fromFormat, supported );
        }

        return fromFormat.toLowerCase();
    }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class>
      <name>InputFile</name>
      <description><![CDATA[
        An input file with pathname and wanted format.
      ]]></description>
      <version>1.0.0</version>
      <superClass>AbstractFile</superClass>
      <codeSegments>
        <codeSegment>
          <version>1.0.0</version>
          <code>
            <![CDATA[
    /**
     * Default constructor.
     */
    private InputFile()
    {
        //nop
    }

    /**
     * @param pathname not null
     * @param format not null
     * @param supportedFormat not null
     * @return a type safe InputFile
     * @throws org.apache.maven.doxia.UnsupportedFormatException
     * @see AbstractFile#setAbsolutePath(String)
     * @see AbstractFile#setFormat(String)
     * @see AbstractFile#getSupportedFormat(String, String, String[])
     */
    public static InputFile valueOf( String pathname, String format, String[] supportedFormat )
        throws org.apache.maven.doxia.UnsupportedFormatException
    {
        if ( pathname == null || pathname.trim().length() == 0 )
        {
            throw new IllegalArgumentException( "pathname is required" );
        }
        if ( supportedFormat == null )
        {
            throw new IllegalArgumentException( "supportedFormat is required" );
        }

        format = getSupportedFormat( pathname, format, supportedFormat );

        InputFile input = new InputFile();
        input.setAbsolutePath( pathname );
        input.setFormat( format );

        return input;
    }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
    <class>
      <name>OutputFile</name>
      <description><![CDATA[
        An output file with pathname and wanted format.
      ]]></description>
      <version>1.0.0</version>
      <superClass>AbstractFile</superClass>
      <codeSegments>
        <codeSegment>
          <version>1.0.0</version>
          <code>
            <![CDATA[
    /**
     * Default constructor.
     */
    private OutputFile()
    {
        //nop
    }

    /**
     * @param pathname not null
     * @param format not null
     * @param supportedFormat not null
     * @return a type safe OutputFile
     * @throws org.apache.maven.doxia.UnsupportedFormatException
     * @see AbstractFile#setAbsolutePath(String)
     * @see AbstractFile#setFormat(String)
     * @see AbstractFile#getSupportedFormat(String, String, String[])
     */
    public static OutputFile valueOf( String pathname, String format, String[] supportedFormat )
        throws org.apache.maven.doxia.UnsupportedFormatException
    {
        if ( pathname == null || pathname.trim().length() == 0 )
        {
            throw new IllegalArgumentException( "pathname is required" );
        }
        if ( supportedFormat == null )
        {
            throw new IllegalArgumentException( "supportedFormat is required" );
        }

        format = getSupportedFormat( pathname, format, supportedFormat );

        OutputFile output = new OutputFile();
        output.setAbsolutePath( pathname );
        output.setFormat( format );

        return output;
    }
            ]]>
          </code>
        </codeSegment>
      </codeSegments>
    </class>
  </classes>
</model>
